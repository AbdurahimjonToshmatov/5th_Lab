_Level 1 Task 2_:

using System;

namespace _5Lab
{
    internal class Program
    {
        static double FindArea(double a, double b, double c, out double S)
        {
            double p = (a + b + c) / 2;
            S = Math.Pow(p * (p - a) * (p - b) * (p - c), 0.5);
            return S;

        }

        static void Main(string[] args)
        {
            double a1, a2, b1, b2, c1, c2;
            double S1 = 0, S2 = 0;

            Console.WriteLine("Введите длины сторон 1-ого треугольника: ");
            double.TryParse(Console.ReadLine(), out a1);
            double.TryParse(Console.ReadLine(), out b1);
            double.TryParse(Console.ReadLine(), out c1);

            Console.WriteLine("Введите длины сторон 2-ого треугольника: ");
            double.TryParse(Console.ReadLine(), out a2);
            double.TryParse(Console.ReadLine(), out b2);
            double.TryParse(Console.ReadLine(), out c2);

            if (a1 > 0 && b1 > 0 && c1 > 0 && a2 > 0 && b2 > 0 && c2 > 0)
            {
                if (a1 + b1 > c1 && a1 + c1 > b1 && b1 + c1 > a1)
                {
                    FindArea(a1, b1, c1, out S1);
                    Console.WriteLine($"Площадь 1-ого треугольника - {S1}");
                }
                else Console.WriteLine("Треугольник 1 не существует!");

                if (a2 + b2 > c2 && a2 + c2 > b2 && b2 + c2 > a2)
                {
                    FindArea(a2, b2, c2, out S2);
                    Console.WriteLine($"Площадь 2-ого треугольника - {S2}");
                }
                else Console.WriteLine("Треугольник 2 не существует!");

                Console.WriteLine();

                if (S1 != 0 && S2 != 0)
                {
                    if (S2 > S1)
                    {
                        Console.WriteLine("Площадь 2-ого треугольника больше площади 1-ого");
                    }
                    else Console.WriteLine("Площадь 1-ого треугольника больше площади 2-ого");
                }
            }
            else Console.WriteLine("Все стороны треугольников должны быть положительными");
        }
    }
}


_Level 2 Task 10_:

using System;
using System.Reflection;

namespace _1st_Lab
{
    class Program
    {
        static int FindMax(int[,] x)
        {
            int max = x[0, 0];
            for (int i = 0; i < x.GetLength(0); i++)
            {
                for (int j = 0; j < x.GetLength(1); j++)
                {
                    if (x[i, j] > max)
                    {
                        max = x[i, j];
                    }
                }
            }

            return max;
        }
        static void WriteMatrix(int[,] x)
        {
            int rows = x.GetLength(0);
            int columns = x.GetLength(1);

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < columns; j++)
                    Console.Write("{0, -5}", x[i, j]);
                Console.WriteLine();
            }
            Console.WriteLine();
        }

        static int UnderMain(int[,] x)
        {
            int max = x[0, 0];
            int j_max = 0;
            for (int i = 0; i < x.GetLength(0); i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    if (x[i, j] > max)
                    {
                        max = x[i, j];
                        j_max = j;
                    }
                }
            }
            return j_max;
        }

        static int AboveMain(int[,] x)
        {
            int min = FindMax(x);
            int j_min = 0;
            for (int i = 0; i < x.GetLength(0); i++)
            {
                for (int j = i + 1; j < x.GetLength(1); j++)
                {
                    if (x[i, j] < min)
                    {
                        min = x[i, j];
                        j_min = j;
                    }
                }
            }
            return j_min;
        }

        static int[,] MatrixChanges(int[,] x)
        {
            int j_max = UnderMain(x);
            int j_min = AboveMain(x);

            if (j_max == j_min)
            {
                for (int i = 0; i < x.GetLength(0); i++)
                {
                    for (int j = j_max; j < x.GetLength(1) - 1; j++)
                    {
                        x[i, j] = x[i, j + 1];
                    }
                }
            }
            else
            {
                if (j_max > j_min)
                {
                    for (int i = 0; i < x.GetLength(0); i++)
                    {
                        for (int j = j_max; j < x.GetLength(1) - 1; j++)
                        {
                            x[i, j] = x[i, j + 1];
                        }
                    }

                    for (int i = 0; i < x.GetLength(0); i++)
                    {
                        for (int j = j_min; j < x.GetLength(1) - 1; j++)
                        {
                            x[i, j] = x[i, j + 1];
                        }
                    }
                }

                else
                {
                    for (int i = 0; i < x.GetLength(0); i++)
                    {
                        for (int j = j_min; j < x.GetLength(1) - 1; j++)
                        {
                            x[i, j] = x[i, j + 1];
                        }
                    }

                    for (int i = 0; i < x.GetLength(0); i++)
                    {
                        for (int j = j_max; j < x.GetLength(1) - 1; j++)
                        {
                            x[i, j] = x[i, j + 1];
                        }
                    }
                }
            }

            return x;
        }

        static void Main(string[] args)
        {
            int[,] A = new int[5, 5];

            Random random = new Random();

            for (int i = 0; i < 5; i++)
            {
                for (int j = 0; j < 5; j++)
                {
                    A[i, j] = random.Next(0, 40);
                }
            }

            Console.WriteLine("Исходная матрица: ");
            WriteMatrix(A);

            int j_max = UnderMain(A);
            int j_min = AboveMain(A);

            Console.WriteLine($"Max - {j_max}, min - {j_min} \n");

            A = MatrixChanges(A);

            if (j_max == j_min)
            {
                Console.WriteLine("Итоговая матрица: ");
                for (int i = 0; i < A.GetLength(0); i++)
                {
                    for (int j = 0; j < A.GetLength(1) - 1; j++)
                        Console.Write("{0, -5}", A[i, j]);
                    Console.WriteLine();
                }
                Console.WriteLine();
            }
            else
            {
                Console.WriteLine("Итоговая матрица: ");
                for (int i = 0; i < A.GetLength(0); i++)
                {
                    for (int j = 0; j < A.GetLength(1) - 2; j++)
                        Console.Write("{0, -5}", A[i, j]);
                    Console.WriteLine();
                }
                Console.WriteLine();
            }
        }
    }
 }

_Level 2 Task 23_:

using System;
using System.Security.Cryptography;

namespace _5Lab
{
    internal class Program
    {
        static int FindMin(int[,] x)
        {
            int min = x[0, 0];
            for (int i = 0; i < x.GetLength(0); i++)
            {
                for (int j = 0; j < x.GetLength(1); j++)
                {
                    if (x[i, j] < min)
                    {
                        min = x[i, j];
                    }
                }
            }

            return min;
        }

        static int[,] CopyMatrix(int[,] a)
        {
            int[,] b = new int[a.GetLength(0), a.GetLength(1)];
            for (int i = 0; i < a.GetLength(0); i++)
            {
                for (int j = 0; j < a.GetLength(1); j++)
                {
                    b[i, j] = a[i, j];
                }
            }

            return b;
        }
        static void WriteMatrix(int[,] x)
        {
            int rows = x.GetLength(0);
            int columns = x.GetLength(1);

            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < columns; j++)
                    Console.Write("{0, -5}", x[i, j]);
                Console.WriteLine();
            }
            Console.WriteLine();
        }
        static int[,] MatrixChange(int[,] x, out int[,] b)
        {
            int n = 0;

            b = CopyMatrix(x);
            int[,] c = CopyMatrix(x);

            int max = x[0, 0];
            int min = FindMin(x);
            int i_max = 0;
            int j_max = 0;

            do
            {
                max = x[0, 0];
                i_max = 0;
                j_max = 0;

                for (int i = 0; i < x.GetLength(0); i++)
                {
                    for (int j = 0; j < x.GetLength(1); j++)
                    {
                        if (x[i, j] > max)
                        {
                            max = x[i, j];
                            i_max = i;
                            j_max = j;
                        }
                    }
                }

                b[i_max, j_max] = max * 2;
                x[i_max, j_max] = min;

                n++;

            } while (n < 5);

            for (int i = 0; i < c.GetLength(0); i++)
            {
                for (int j = 0; j < c.GetLength(1); j++)
                {
                    if (c[i, j] < max)
                    {
                        b[i, j] = b[i, j] / 2;
                    }
                }
            }

            return b;
        }

        static void Main(string[] args)
        {
            int[,] A = new int[2, 4]
            {
                {2, 6, 8 , 43 },
                {4, 19, 89, 11 }
            };

            int[,] B = new int[3, 4]
            {
                {0, -6, -94 , -43 },
                {-55, -19, -1, -11 },
                {-22, 0, -9, -4 }
            };

            Console.WriteLine("Исходная матрица А:");
            WriteMatrix(A);

            Console.WriteLine("Исходная матрица B:");
            WriteMatrix(B);

            MatrixChange(A, out A);
            Console.WriteLine("Измененная матрица А: ");
            WriteMatrix(A);

            MatrixChange(B, out B);
            Console.WriteLine("Измененная матрица B: ");
            WriteMatrix(B);
        }
    }
}

